#!/bin/sh
### BEGIN INIT INFO
# Provides:          consul
# Required-Start:    $local_fs $remote_fs $syslog
# Required-Stop:     $local_fs $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Consul service discovery framework
# Description:       Healthchecks local services and registers
#                    them in a central consul database.
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMONNAME=consul
DAEMON=/usr/bin/$DAEMONNAME
PIDDIR=/var/run/$DAEMONNAME
PIDFILE=/var/run/$DAEMONNAME/$DAEMONNAME.pid
SCRIPTNAME=/etc/init.d/$DAEMONNAME
CONFIG_DIR=/etc/consul/xivo
RUNCONSUL="yes"
USER=consul
GROUP=$USER

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$DAEMONNAME ] && . /etc/default/$DAEMONNAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

DAEMON_ARGS="agent -config-dir ${CONFIG_DIR} -pid-file ${PIDFILE}"

is_enabled() {
    if [ "$RUNCONSUL" != "yes" ];then
        echo "Consul startup is disabled. Edit /etc/default/consul first."
        exit 0
    fi
}

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

[ -d "$PIDDIR" ] || install -d -o "$USER" -g "$GROUP" "$PIDDIR"

#
# Function that starts the daemon/service
#
do_start()
{
    is_enabled
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    echo "Starting consul and backgrounding"
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --chuid $USER --background --test -- $DAEMON_ARGS || return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --chuid $USER --background -- $DAEMON_ARGS || return 2

    echo -n "Waiting for consul daemon to be listening..."
    started=0
    for i in `seq 1 30`; do
        if start-stop-daemon --quiet --stop --test --pidfile $PIDFILE --exec $DAEMON --user $USER; then
            for i in `seq 1 30`; do
                if "$DAEMON" info >/dev/null; then
                    echo 'done'
                    return 0
                fi
                sleep 1
            done
            echo " FAIL: consul process is alive, but is not listening."
            return 2
        fi
        sleep 1
    done
    echo " FAIL: consul process died"
    return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # first try doing this gracefully
    "$DAEMON" leave
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $DAEMONNAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $DAEMONNAME
    return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$DAEMONNAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$DAEMONNAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  #reload|force-reload)
    #
    # If do_reload() is not implemented then leave this commented out
    # and leave 'force-reload' as an alias for 'restart'.
    #
    #log_daemon_msg "Reloading $DESC" "$DAEMONNAME"
    #do_reload
    #log_end_msg $?
    #;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$DAEMONNAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  status)
    status_of_proc -p $PIDFILE $DAEMON "$DAEMONNAME" && exit 0 || exit $?
  ;;
  *)
    #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload|status}" >&2
    echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
    exit 3
    ;;
esac

:
